Revision history for Perl extension Convert::ASN1::asn1c.

0.01  Mon Sep 13 10:13:54 2010
	- original version; created by h2xs 1.23 with options
		-AX -n Convert::ASN1::asn1c

0.02  Tue Sep 14 10:18:00 2010
	- added META.yml so that CPAN Testers knows about this modules dependencies
    - changed test script so that tests that rely on unber/enber are skipped if
      those are not found because there is no possibility (that I know of) to
      specify non-perl dependencies (i.e., dependencies on external programs).

0.03  Tue Sep 14 12:53:00 2010
	- the previous update didn't have the desired effect, as META.yml is
	  autogenerated by ExtUtils::MakeMaker, so I changed Makefile.PL now
	- fixed an error in the pod formatting of the documentation

0.04  Wed Sep 15 10:43:00 2010
	- instead of giving the template file name to the encode / decode function
      it is now also possible to supply the template directly as a string with
      the sencode and sdecode function
	- added a new function to retreive a list of the tags found in an "unknow"
      PDU. This helps to decide which template should be used to extract
      values from the binary PDU in cases where the application protocol
      allows the arrival of several different PDUs
    - Put usefull information in the README file

0.05  Tue Sep 21 11:02:00 2010
    - removed dependency on too recent perl version

0.06  Sun Oct 24 18:48:00 2010
    - added size autocorrection, which fixes the following problem:
	  if the template was obtained from a asn1 pdu where a field was of a
	  certain length and we encode a new packet with a field of different
	  length the field length specification of the changed field will be
	  set to the correct value by the encoding routines - however, the
	  sizes of all enclosing constructed fields remain as they are in
	  the template. That causes enber to generate invalid pdus as enber
	  does not recalculate these sizes by itself
	- fields of unknown datatype are no longer treated as bit string fields
	  as the encoding of bitstrings has to follow certain rules which are
	  not always met by arbitrary fields
